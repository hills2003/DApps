{"version":3,"sources":["getWeb3.js","TodoContainer.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","React","memo","todos","handleCheck","addTodo","useState","content","setContent","className","Form","Control","type","id","aria-describedby","onChange","e","target","value","Button","variant","onClick","ListGroup","as","map","item","index","Item","_content","caller","Check","checked","_checked","_id","App","contractInstance","setContractInstance","todoCount","setTodoCount","account","setAccount","loading","setTodos","useEffect","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","TodoContract","networks","Contract","abi","address","instance","methods","TodoCount","call","counter","arr","i","TodoList","res","push","reverse","updateTodoState","send","from","createTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08a35c33.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component,useEffect ,useState} from \"react\";\r\nimport { Button ,Badge ,ListGroup,Form , FormCheck ,FormLabel ,FormControl} from 'react-bootstrap'\r\nimport \"./App.css\"\r\nconst TodoContainer = ({todos,handleCheck,addTodo}) => {\r\n\r\n    const [checked,setChecked] = useState()\r\n    const [content,setContent] = useState()\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n\r\n           <div className=\"center-container\">\r\n           \r\n            <Form.Control\r\n                type=\"text\"\r\n                id=\"inputPassword5\"\r\n                aria-describedby=\"passwordHelpBlock\"\r\n                onChange={(e)=>{setContent(e.target.value)}}\r\n            />\r\n\r\n            <Button variant=\"primary\" onClick={()=>{addTodo(content);setContent(\"\")}}>Primary</Button>\r\n           </div>\r\n            <ListGroup as=\"ol\" className=\"center-container\">\r\n               \r\n                {todos.map((item,index)=>{\r\n                    return (\r\n                        <ListGroup.Item\r\n                        \r\n                        as=\"li\"\r\n                        className=\"d-flex justify-content-between align-items-start\"\r\n                    >\r\n                        <div className=\"ms-2 me-auto\">\r\n                        <div className=\"fw-bold\">{item._content}</div>\r\n                        {item.caller}\r\n                        </div>\r\n                    <Form>\r\n                        <Form.Check \r\n                            type='checkbox'\r\n                            id={`default-type`}\r\n                            checked={item._checked}\r\n                            onChange={()=>handleCheck(item._id)}\r\n                            \r\n                        />\r\n                    </Form>\r\n                    </ListGroup.Item>\r\n                    )\r\n                })}\r\n                </ListGroup>\r\n            </div>\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoContainer);","import React, { Component,useEffect ,useState} from \"react\";\nimport TodoContract from \"./contracts/TodoContract.json\";\nimport getWeb3 from \"./getWeb3\";\nimport TodoContainer from \"./TodoContainer\"\n\nimport \"./App.css\";\n\n\nconst App =()=> {\n  // state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  const [contractInstance,setContractInstance] = useState(\"\");\n  const [todoCount,setTodoCount] = useState();\n  const [account,setAccount] = useState()\n  const [loading,setLoading] = useState(false)\n  const [todos,setTodos] = useState([])\n  useEffect(async()=>{\n     const web3 = await getWeb3();\n     const accounts = await web3.eth.getAccounts();\n     setAccount(accounts)\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId)\n      const deployedNetwork = TodoContract.networks[networkId];\n      if(deployedNetwork) {\n        let instance = await new web3.eth.Contract(\n          TodoContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        let counter = await instance.methods.TodoCount().call()\n       setTodoCount(counter)\n       setContractInstance(instance)\n       \n\n      \n\n      }\n \n     \n  },[])\n\n  useEffect(async()=>{\n    let arr = [];\n    for(let i =1 ;i <= todoCount; i++) {\n      let res = contractInstance && await contractInstance.methods.TodoList(i).call();\n       arr.push(res)\n       arr.reverse()\n      \n    }  \n    setTodos(arr)\n    \n  },[contractInstance, todoCount])\n\n  const handleCheck =async (id) =>{\n   await contractInstance && await contractInstance.methods.updateTodoState(id).send({from:account[0]});\n  }\n\n  const addTodo =async (id) =>{\n    try{\n      await contractInstance && await contractInstance.methods.createTodo(id).send({from:account[0]});\n      setTodoCount(await contractInstance && await contractInstance.methods.TodoCount().call());\n    }\n    catch{\n      console.log(\"failed to add new todo item\")\n    }\n    \n   }\n \n\n  \n  \n\n\n    return (\n      <div className=\"App\">\n        {loading ? <h2>loading.....</h2>:(\n\n          <>\n            <TodoContainer todos={todos} handleCheck={handleCheck} addTodo={addTodo} />\n             </>\n        )}\n        \n      </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}